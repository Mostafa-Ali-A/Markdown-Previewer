{"ast":null,"code":"/**\n * marked v5.1.1 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n/**\n * Helpers\n */\n\n\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nconst getEscapeReplacement = ch => escapeReplacements[ch];\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n/**\n * @param {string} html\n */\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\n\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n/**\n * @param {string} base\n * @param {string} href\n */\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = {\n  exec: function noopTest() {}\n};\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n    let escaped = false,\n        curr = offset;\n\n    while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n\n    if (escaped) {\n      // odd number of slashes means | is escaped\n      // so we leave it alone\n      return '|';\n    } else {\n      // add space before unescaped |\n      return ' |';\n    }\n  }),\n        cells = row.split(/ \\|/);\n  let i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n\n  return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\n\n\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n\n  if (l === 0) {\n    return '';\n  } // Length of suffix matching the invert condition.\n\n\n  let suffLen = 0; // Step left until we fail to match the invert condition.\n\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  const l = str.length;\n  let level = 0,\n      i = 0;\n\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\nfunction checkDeprecations(opt, callback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n  }\n\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n  }\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(node => {\n    const matchIndentInNode = node.match(/^\\s+/);\n\n    if (matchIndentInNode === null) {\n      return node;\n    }\n\n    const [indentInNode] = matchIndentInNode;\n\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n\n    return node;\n  }).join('\\n');\n}\n/**\n * Tokenizer\n */\n\n\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic ? rtrim(text, '\\n') : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n\n    if (cap) {\n      let text = cap[2].trim(); // remove trailing #s\n\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      } // Get next list item\n\n\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`); // Check if current bullet point can start a new List Item\n\n      while (src) {\n        endEarly = false;\n\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) {\n          // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, t => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) {\n          // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`); // Check if following lines should be included in List Item\n\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine; // Re-align to follow commonmark nesting rules\n\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            } // End list item if found code fences\n\n\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            } // End list item if found start of new heading\n\n\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            } // End list item if found start of new bullet\n\n\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            } // Horizontal rule found\n\n\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n              // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              } // paragraph continuation unless last line was a different block level element\n\n\n              if (line.search(/[^ ]/) >= 4) {\n                // indented code block\n                break;\n              }\n\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) {\n              // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        } // Check for task list items\n\n\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n        list.raw += raw;\n      } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n\n\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n      const l = list.items.length; // Item child tokens handled here at end because we needed to have the final item to trim it first\n\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n          list.loose = hasMultipleLineBreaks;\n        }\n      } // Set all items to loose if list is loose\n\n\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n\n    if (cap) {\n      const token = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => {\n          return {\n            text: c\n          };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n        let l = item.align.length;\n        let i, j, k, row;\n\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n            return {\n              text: c\n            };\n          });\n        } // parse child tokens inside headers and cells\n        // header child tokens\n\n\n        l = item.header.length;\n\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        } // cell child tokens\n\n\n        l = item.rows.length;\n\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize ? 'text' : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        } // ending angle bracket cannot be escaped\n\n\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n\n      let href = cap[2];\n      let title = '';\n\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc) {\n    let prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return; // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = match[0].length - 1;\n      let rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)\n\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) {\n          // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n        // Remove extra characters. *a*** -> *a*\n\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const raw = src.slice(0, lLength + match.index + rLength + 1); // Create `em` if smallest delimiter has odd char count. *a***\n\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        } // Create 'strong' if smallest delimiter has even char count. **a***\n\n\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n\n    if (cap) {\n      let text, href;\n\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n\n        text = escape(cap[0]);\n\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n\n    if (cap) {\n      let text;\n\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n}\n/**\n * Block-Level Grammar\n */\n\n\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.lheading = edit(block.lheading).replace(/bull/g, block.bullet) // lists can interrupt\n.getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block\n};\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = { ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n  + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n\n};\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = { ...block.normal,\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n}; // list of unicode punctuation marks, plus any missing characters from CommonMark spec\n\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>\n\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = edit(inline._escapes, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline\n};\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = { ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n};\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = { ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = { ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n};\n/**\n * smartypants text replacement\n * @param {string} text\n */\n\nfunction smartypants(text) {\n  return text // em-dashes\n  .replace(/---/g, '\\u2014') // en-dashes\n  .replace(/--/g, '\\u2013') // opening singles\n  .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018') // closing singles & apostrophes\n  .replace(/'/g, '\\u2019') // opening doubles\n  .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c') // closing doubles\n  .replace(/\"/g, '\\u201d') // ellipses\n  .replace(/\\.{3}/g, '\\u2026');\n}\n/**\n * mangle email addresses\n * @param {string} text\n */\n\n\nfunction mangle(text) {\n  let out = '',\n      i,\n      ch;\n  const l = text.length;\n\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n/**\n * Block Lexer\n */\n\n\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n\n\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n\n\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n\n\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n\n\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, '\\n');\n    this.blockTokens(src, this.tokens);\n    let next;\n\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n  /**\n   * Lexing\n   */\n\n\n  blockTokens(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n\n        return false;\n      })) {\n        continue;\n      } // newline\n\n\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // code\n\n\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.\n\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // fences\n\n\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // heading\n\n\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // hr\n\n\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // blockquote\n\n\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // list\n\n\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // html\n\n\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // def\n\n\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n\n        continue;\n      } // table (gfm)\n\n\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // lheading\n\n\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n\n\n      cutSrc = src;\n\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      } // text\n\n\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n\n\n  inlineTokens(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong\n\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar; // Mask out reflinks\n\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    } // Mask out other blocks\n\n\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    } // Mask out escaped characters\n\n\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n\n      keepPrevChar = false; // extensions\n\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n\n        return false;\n      })) {\n        continue;\n      } // escape\n\n\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // tag\n\n\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // link\n\n\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // reflink, nolink\n\n\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // em & strong\n\n\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // code\n\n\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // br\n\n\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // del (gfm)\n\n\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // autolink\n\n\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // url (gfm)\n\n\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n\n\n      cutSrc = src;\n\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n\n        if (token.raw.slice(-1) !== '_') {\n          // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n\n}\n/**\n * Renderer\n */\n\n\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n  }\n  /**\n   * @param {string} quote\n   */\n\n\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html, block) {\n    return html;\n  }\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    } // ignore IDs\n\n\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n          startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n\n\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  }\n  /**\n   * @param {string} content\n   */\n\n\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align ? `<${type} align=\"${flags.align}\">` : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n\n\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<a href=\"' + href + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += '>' + text + '</a>';\n    return out;\n  }\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n\n}\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\n\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n\n}\n/**\n * Slugger generates header id\n */\n\n\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n  /**\n   * @param {string} value\n   */\n\n\n  serialize(value) {\n    return value.toLowerCase().trim() // remove html tags\n    .replace(/<[!\\/a-z].*?>/ig, '') // remove unwanted chars\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n  }\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n\n\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n\n    return slug;\n  }\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n\n\n  slug(value) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n\n}\n/**\n * Parsing & Compiling\n */\n\n\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n  /**\n   * Static Parse Method\n   */\n\n\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n\n\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n\n\n  parse(tokens) {\n    let top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let out = '',\n        i,\n        j,\n        k,\n        l2,\n        l3,\n        row,\n        cell,\n        header,\n        body,\n        token,\n        ordered,\n        start,\n        loose,\n        itemBody,\n        item,\n        checked,\n        task,\n        checkbox,\n        ret;\n    const l = tokens.length;\n\n    for (i = 0; i < l; i++) {\n      token = tokens[i]; // Run any renderer extensions\n\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space':\n          {\n            continue;\n          }\n\n        case 'hr':\n          {\n            out += this.renderer.hr();\n            continue;\n          }\n\n        case 'heading':\n          {\n            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n            continue;\n          }\n\n        case 'code':\n          {\n            out += this.renderer.code(token.text, token.lang, token.escaped);\n            continue;\n          }\n\n        case 'table':\n          {\n            header = ''; // header\n\n            cell = '';\n            l2 = token.header.length;\n\n            for (j = 0; j < l2; j++) {\n              cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                header: true,\n                align: token.align[j]\n              });\n            }\n\n            header += this.renderer.tablerow(cell);\n            body = '';\n            l2 = token.rows.length;\n\n            for (j = 0; j < l2; j++) {\n              row = token.rows[j];\n              cell = '';\n              l3 = row.length;\n\n              for (k = 0; k < l3; k++) {\n                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                  header: false,\n                  align: token.align[k]\n                });\n              }\n\n              body += this.renderer.tablerow(cell);\n            }\n\n            out += this.renderer.table(header, body);\n            continue;\n          }\n\n        case 'blockquote':\n          {\n            body = this.parse(token.tokens);\n            out += this.renderer.blockquote(body);\n            continue;\n          }\n\n        case 'list':\n          {\n            ordered = token.ordered;\n            start = token.start;\n            loose = token.loose;\n            l2 = token.items.length;\n            body = '';\n\n            for (j = 0; j < l2; j++) {\n              item = token.items[j];\n              checked = item.checked;\n              task = item.task;\n              itemBody = '';\n\n              if (item.task) {\n                checkbox = this.renderer.checkbox(checked);\n\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: 'text',\n                      text: checkbox\n                    });\n                  }\n                } else {\n                  itemBody += checkbox;\n                }\n              }\n\n              itemBody += this.parse(item.tokens, loose);\n              body += this.renderer.listitem(itemBody, task, checked);\n            }\n\n            out += this.renderer.list(body, ordered, start);\n            continue;\n          }\n\n        case 'html':\n          {\n            out += this.renderer.html(token.text, token.block);\n            continue;\n          }\n\n        case 'paragraph':\n          {\n            out += this.renderer.paragraph(this.parseInline(token.tokens));\n            continue;\n          }\n\n        case 'text':\n          {\n            body = token.tokens ? this.parseInline(token.tokens) : token.text;\n\n            while (i + 1 < l && tokens[i + 1].type === 'text') {\n              token = tokens[++i];\n              body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n            }\n\n            out += top ? this.renderer.paragraph(body) : body;\n            continue;\n          }\n\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n\n\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n        i,\n        token,\n        ret;\n    const l = tokens.length;\n\n    for (i = 0; i < l; i++) {\n      token = tokens[i]; // Run any renderer extensions\n\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n\n        case 'html':\n          {\n            out += renderer.html(token.text);\n            break;\n          }\n\n        case 'link':\n          {\n            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'image':\n          {\n            out += renderer.image(token.href, token.title, token.text);\n            break;\n          }\n\n        case 'strong':\n          {\n            out += renderer.strong(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'em':\n          {\n            out += renderer.em(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'codespan':\n          {\n            out += renderer.codespan(token.text);\n            break;\n          }\n\n        case 'br':\n          {\n            out += renderer.br();\n            break;\n          }\n\n        case 'del':\n          {\n            out += renderer.del(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'text':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n\n    return out;\n  }\n\n}\n\nclass Hooks {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  static passThroughHooks = new Set(['preprocess', 'postprocess']);\n  /**\n   * Process markdown before marked\n   */\n\n  preprocess(markdown) {\n    return markdown;\n  }\n  /**\n   * Process HTML after marked is finished\n   */\n\n\n  postprocess(html) {\n    return html;\n  }\n\n}\n\nclass Marked {\n  defaults = getDefaults();\n  options = this.setOptions;\n  parse = this.#parseMarkdown(Lexer.lex, Parser.parse);\n  parseInline = this.#parseMarkdown(Lexer.lexInline, Parser.parseInline);\n  Parser = Parser;\n  parser = Parser.parse;\n  Renderer = Renderer;\n  TextRenderer = TextRenderer;\n  Lexer = Lexer;\n  lexer = Lexer.lex;\n  Tokenizer = Tokenizer;\n  Slugger = Slugger;\n  Hooks = Hooks;\n\n  constructor() {\n    this.use(...arguments);\n  }\n\n  walkTokens(tokens, callback) {\n    let values = [];\n\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n\n      switch (token.type) {\n        case 'table':\n          {\n            for (const cell of token.header) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n\n            for (const row of token.rows) {\n              for (const cell of row) {\n                values = values.concat(this.walkTokens(cell.tokens, callback));\n              }\n            }\n\n            break;\n          }\n\n        case 'list':\n          {\n            values = values.concat(this.walkTokens(token.items, callback));\n            break;\n          }\n\n        default:\n          {\n            if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) {\n              // Walk any extensions\n              this.defaults.extensions.childTokens[token.type].forEach(childTokens => {\n                values = values.concat(this.walkTokens(token[childTokens], callback));\n              });\n            } else if (token.tokens) {\n              values = values.concat(this.walkTokens(token.tokens, callback));\n            }\n          }\n      }\n    }\n\n    return values;\n  }\n\n  use() {\n    const extensions = this.defaults.extensions || {\n      renderers: {},\n      childTokens: {}\n    };\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    args.forEach(pack => {\n      // copy options to new object\n      const opts = { ...pack\n      }; // set async to true if it was set to true before\n\n      opts.async = this.defaults.async || opts.async || false; // ==-- Parse \"addon\" extensions --== //\n\n      if (pack.extensions) {\n        pack.extensions.forEach(ext => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n\n          if (ext.renderer) {\n            // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function () {\n                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                  args[_key2] = arguments[_key2];\n                }\n\n                let ret = ext.renderer.apply(this, args);\n\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n\n          if (ext.tokenizer) {\n            // Tokenizer Extensions\n            if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n\n            if (ext.start) {\n              // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n\n          if (ext.childTokens) {\n            // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      } // ==-- Parse \"overwrite\" extensions --== //\n\n\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new Renderer(this.defaults);\n\n        for (const prop in pack.renderer) {\n          const prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false\n\n          renderer[prop] = function () {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n\n            let ret = pack.renderer[prop].apply(renderer, args);\n\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n\n            return ret;\n          };\n        }\n\n        opts.renderer = renderer;\n      }\n\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new Tokenizer(this.defaults);\n\n        for (const prop in pack.tokenizer) {\n          const prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false\n\n          tokenizer[prop] = function () {\n            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              args[_key4] = arguments[_key4];\n            }\n\n            let ret = pack.tokenizer[prop].apply(tokenizer, args);\n\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n\n            return ret;\n          };\n        }\n\n        opts.tokenizer = tokenizer;\n      } // ==-- Parse Hooks extensions --== //\n\n\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new Hooks();\n\n        for (const prop in pack.hooks) {\n          const prevHook = hooks[prop];\n\n          if (Hooks.passThroughHooks.has(prop)) {\n            hooks[prop] = arg => {\n              if (this.defaults.async) {\n                return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = pack.hooks[prop].call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[prop] = function () {\n              for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                args[_key5] = arguments[_key5];\n              }\n\n              let ret = pack.hooks[prop].apply(hooks, args);\n\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n\n              return ret;\n            };\n          }\n        }\n\n        opts.hooks = hooks;\n      } // ==-- Parse WalkTokens extensions --== //\n\n\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n\n        opts.walkTokens = function (token) {\n          let values = [];\n          values.push(pack.walkTokens.call(this, token));\n\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults,\n        ...opts\n      };\n    });\n    return this;\n  }\n\n  setOptions(opt) {\n    this.defaults = { ...this.defaults,\n      ...opt\n    };\n    return this;\n  }\n\n  #parseMarkdown(lexer, parser) {\n    return (src, opt, callback) => {\n      if (typeof opt === 'function') {\n        callback = opt;\n        opt = null;\n      }\n\n      const origOpt = { ...opt\n      };\n      opt = { ...this.defaults,\n        ...origOpt\n      };\n      const throwError = this.#onError(opt.silent, opt.async, callback); // throw error in case of non string input\n\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      checkDeprecations(opt, callback);\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n      }\n\n      if (callback) {\n        const highlight = opt.highlight;\n        let tokens;\n\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n\n          tokens = lexer(src, opt);\n        } catch (e) {\n          return throwError(e);\n        }\n\n        const done = err => {\n          let out;\n\n          if (!err) {\n            try {\n              if (opt.walkTokens) {\n                this.walkTokens(tokens, opt.walkTokens);\n              }\n\n              out = parser(tokens, opt);\n\n              if (opt.hooks) {\n                out = opt.hooks.postprocess(out);\n              }\n            } catch (e) {\n              err = e;\n            }\n          }\n\n          opt.highlight = highlight;\n          return err ? throwError(err) : callback(null, out);\n        };\n\n        if (!highlight || highlight.length < 3) {\n          return done();\n        }\n\n        delete opt.highlight;\n        if (!tokens.length) return done();\n        let pending = 0;\n        this.walkTokens(tokens, token => {\n          if (token.type === 'code') {\n            pending++;\n            setTimeout(() => {\n              highlight(token.text, token.lang, (err, code) => {\n                if (err) {\n                  return done(err);\n                }\n\n                if (code != null && code !== token.text) {\n                  token.text = code;\n                  token.escaped = true;\n                }\n\n                pending--;\n\n                if (pending === 0) {\n                  done();\n                }\n              });\n            }, 0);\n          }\n        });\n\n        if (pending === 0) {\n          done();\n        }\n\n        return;\n      }\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(src => lexer(src, opt)).then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then(tokens => parser(tokens, opt)).then(html => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n\n        const tokens = lexer(src, opt);\n\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n\n        let html = parser(tokens, opt);\n\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n\n        return html;\n      } catch (e) {\n        return throwError(e);\n      }\n    };\n  }\n\n  #onError(silent, async, callback) {\n    return e => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n\n        if (async) {\n          return Promise.resolve(msg);\n        }\n\n        if (callback) {\n          callback(null, msg);\n          return;\n        }\n\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n\n      if (callback) {\n        callback(e);\n        return;\n      }\n\n      throw e;\n    };\n  }\n\n}\n\nconst markedInstance = new Marked(defaults);\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  return markedInstance.parse(src, opt, callback);\n}\n/**\n * Options\n */\n\n\nmarked.options = marked.setOptions = function (opt) {\n  markedInstance.setOptions(opt);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\nmarked.defaults = defaults;\n/**\n * Use Extension\n */\n\nmarked.use = function () {\n  markedInstance.use(...arguments);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Run callback for every token\n */\n\n\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Parse Inline\n * @param {string} src\n */\n\n\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.Hooks = Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\nexport { Hooks, Lexer, Marked, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","hooks","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkDeprecations","callback","console","warn","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","Tokenizer","constructor","options","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","t","repeat","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","anyPunctuation","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","Object","create","inlineQueue","lex","lexInline","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","id","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","hasOwnProperty","dryrun","Parser","textRenderer","parse","parser","parseInline","l2","l3","cell","itemBody","ret","renderers","unshift","Hooks","passThroughHooks","Set","preprocess","markdown","postprocess","Marked","setOptions","parseMarkdown","use","values","concat","childTokens","args","pack","opts","ext","prevRenderer","apply","prop","prevTokenizer","prevHook","has","arg","Promise","resolve","then","origOpt","throwError","onError","prototype","done","err","pending","setTimeout","all","catch","message","msg","reject","markedInstance","marked"],"sources":["D:/Mostafa/Markdown Previewer/node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v5.1.1 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkDeprecations(opt, callback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n  }\n\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n  }\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + rLength + 1);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.lheading = edit(block.lheading)\n  .replace(/bull/g, block.bullet) // lists can interrupt\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block };\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = edit(inline._escapes, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline };\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n};\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html, block) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token.text, token.block);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\nclass Hooks {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess'\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html) {\n    return html;\n  }\n}\n\nclass Marked {\n  defaults = getDefaults();\n  options = this.setOptions;\n\n  parse = this.#parseMarkdown(Lexer.lex, Parser.parse);\n  parseInline = this.#parseMarkdown(Lexer.lexInline, Parser.parseInline);\n\n  Parser = Parser;\n  parser = Parser.parse;\n  Renderer = Renderer;\n  TextRenderer = TextRenderer;\n  Lexer = Lexer;\n  lexer = Lexer.lex;\n  Tokenizer = Tokenizer;\n  Slugger = Slugger;\n  Hooks = Hooks;\n\n  constructor(...args) {\n    this.use(...args);\n  }\n\n  walkTokens(tokens, callback) {\n    let values = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          for (const cell of token.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          values = values.concat(this.walkTokens(token.items, callback));\n          break;\n        }\n        default: {\n          if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n            this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\n              values = values.concat(this.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(this.walkTokens(token.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args) {\n    const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack };\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if (ext.renderer) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if (ext.tokenizer) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if (ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          const prevRenderer = renderer[prop];\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[prop] = (...args) => {\n            let ret = pack.renderer[prop].apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          const prevTokenizer = tokenizer[prop];\n          // Replace tokenizer with func to run extension, but fall back if false\n          tokenizer[prop] = (...args) => {\n            let ret = pack.tokenizer[prop].apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new Hooks();\n        for (const prop in pack.hooks) {\n          const prevHook = hooks[prop];\n          if (Hooks.passThroughHooks.has(prop)) {\n            hooks[prop] = (arg) => {\n              if (this.defaults.async) {\n                return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = pack.hooks[prop].call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[prop] = (...args) => {\n              let ret = pack.hooks[prop].apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        opts.walkTokens = function(token) {\n          let values = [];\n          values.push(pack.walkTokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  #parseMarkdown(lexer, parser) {\n    return (src, opt, callback) => {\n      if (typeof opt === 'function') {\n        callback = opt;\n        opt = null;\n      }\n\n      const origOpt = { ...opt };\n      opt = { ...this.defaults, ...origOpt };\n      const throwError = this.#onError(opt.silent, opt.async, callback);\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      checkDeprecations(opt, callback);\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n      }\n\n      if (callback) {\n        const highlight = opt.highlight;\n        let tokens;\n\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          tokens = lexer(src, opt);\n        } catch (e) {\n          return throwError(e);\n        }\n\n        const done = (err) => {\n          let out;\n\n          if (!err) {\n            try {\n              if (opt.walkTokens) {\n                this.walkTokens(tokens, opt.walkTokens);\n              }\n              out = parser(tokens, opt);\n              if (opt.hooks) {\n                out = opt.hooks.postprocess(out);\n              }\n            } catch (e) {\n              err = e;\n            }\n          }\n\n          opt.highlight = highlight;\n\n          return err\n            ? throwError(err)\n            : callback(null, out);\n        };\n\n        if (!highlight || highlight.length < 3) {\n          return done();\n        }\n\n        delete opt.highlight;\n\n        if (!tokens.length) return done();\n\n        let pending = 0;\n        this.walkTokens(tokens, (token) => {\n          if (token.type === 'code') {\n            pending++;\n            setTimeout(() => {\n              highlight(token.text, token.lang, (err, code) => {\n                if (err) {\n                  return done(err);\n                }\n                if (code != null && code !== token.text) {\n                  token.text = code;\n                  token.escaped = true;\n                }\n\n                pending--;\n                if (pending === 0) {\n                  done();\n                }\n              });\n            }, 0);\n          }\n        });\n\n        if (pending === 0) {\n          done();\n        }\n\n        return;\n      }\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        const tokens = lexer(src, opt);\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch (e) {\n        return throwError(e);\n      }\n    };\n  }\n\n  #onError(silent, async, callback) {\n    return (e) => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        if (callback) {\n          callback(null, msg);\n          return;\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      if (callback) {\n        callback(e);\n        return;\n      }\n      throw e;\n    };\n  }\n}\n\nconst markedInstance = new Marked(defaults);\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  return markedInstance.parse(src, opt, callback);\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  markedInstance.setOptions(opt);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.Hooks = Hooks;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Hooks, Lexer, Marked, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}